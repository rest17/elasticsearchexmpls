{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Search api deployment template",
  "Parameters": {
    "Label": {
      "Type": "String",
      "Description": "Stage in which Api Gateway will be deployed.",
      "Default": "test"
    },
    "S3Bucket": {
      "Type": "String",
      "Description": "S3 Bucket name where lambda zip is loaded",
      "Default": "chitra-builds"
    },
    "S3KeyName": {
      "Type": "String",
      "Description": "S3 Bucket name where lambda zip is loaded",
      "Default": "searchapi.zip"
    },
    "ElasticSearchURL": {
      "Type": "String",
      "Description": "Lambda Environment variable For connection es cluster node"
    },
    "ElasticSearchPort": {
      "Type": "String",
      "Description": "Lambda environment variable for es port"
    }
  },
  "Resources": {
    "SearchApiRestApiGateway": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "search-api",
        "Description": "Search Rest API's"
      }
    },
    "SearchApiGatewayAccount": {
      "Type": "AWS::ApiGateway::Account",
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "SearchApiGatewayCloudWatchRole",
            "Arn"
          ]
        }
      }
    },
    "SearchApiResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "SearchApiRestApiGateway"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "SearchApiRestApiGateway",
            "RootResourceId"
          ]
        },
        "PathPart": "search"
      }
    },
    "SearchApiPlanNameResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "SearchApiRestApiGateway"
        },
        "ParentId": {
          "Ref": "SearchApiResource"
        },
        "PathPart": "planname"
      }
    },
    "SearchApiSponsorNameResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "SearchApiRestApiGateway"
        },
        "ParentId": {
          "Ref": "SearchApiResource"
        },
        "PathPart": "sponsorname"
      }
    },
    "SearchApiSponsorStateResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "SearchApiRestApiGateway"
        },
        "ParentId": {
          "Ref": "SearchApiResource"
        },
        "PathPart": "sponsorstate"
      }
    },

    "SearchApiGetPlanName": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {"Ref": "SearchApiRestApiGateway"},
        "ResourceId": {"Ref": "SearchApiResource"},
        "HttpMethod": "GET",
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": {"Fn::Join": ["", ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["SearchApiLambda", "Arn"]}, "/invocations"]]},
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": "$input.path('$')"
              },
              "StatusCode": "200"
            }
          ],
          "PassthroughBehavior" : "WHEN_NO_TEMPLATES",
          "RequestTemplates": {
            "application/json": {"Fn::Join" : ["", [
              "#set($allParams = $input.params())\r\n",
              "{",
              "\"body-json\" : $input.json('$'),\r\n\"params\":{\r\n#foreach($type in $allParams.keySet())\r\n    #set($params = $allParams.get($type))\r\n\"$type\" : {\r\n    #foreach($paramName in $params.keySet())\r\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\r\n        #if($foreach.hasNext),#end\r\n    #end\r\n}\r\n    #if($foreach.hasNext),#end\r\n#end\r\n},\r\n\"stage-variables\" : {\r\n#foreach($key in $stageVariables.keySet())\r\n\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\r\n    #if($foreach.hasNext),#end\r\n#end\r\n},\r\n\"context\" : {\r\n    \"account-id\" : \"$context.identity.accountId\",\r\n    \"api-id\" : \"$context.apiId\",\r\n    \"api-key\" : \"$context.identity.apiKey\",\r\n    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\r\n    \"caller\" : \"$context.identity.caller\",\r\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\r\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\r\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\r\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\r\n    \"http-method\" : \"$context.httpMethod\",\r\n    \"stage\" : \"$context.stage\",\r\n    \"source-ip\" : \"$context.identity.sourceIp\",\r\n    \"user\" : \"$context.identity.user\",\r\n    \"user-agent\" : \"$context.identity.userAgent\",\r\n    \"user-arn\" : \"$context.identity.userArn\",\r\n    \"request-id\" : \"$context.requestId\",\r\n    \"resource-id\" : \"$context.resourceId\",\r\n    \"resource-path\" : \"$context.resourcePath\"\r\n}",
              "}"
            ]]}
          }
        },
        "MethodResponses": [
          {
            "StatusCode": "200"
          }
        ],
        "RequestParameters": {
          "method.request.querystring.ip": true,
          "method.request.header.SYMC-APIKEY-USERNAME": true,
          "method.request.header.SYMC-APIKEY-PASSWORD": true
        }
      }
    },
    "SearchApiGetSponsorName": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {"Ref": "SearchApiRestApiGateway"},
        "ResourceId": {"Ref": "SearchApiResource"},
        "HttpMethod": "GET",
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": {"Fn::Join": ["", ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["VeloCloudCTCLambda", "Arn"]}, "/invocations"]]},
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": "$input.path('$')"
              },
              "StatusCode": "200"
            }
          ],
          "PassthroughBehavior" : "WHEN_NO_TEMPLATES",
          "RequestTemplates": {
            "application/json": {"Fn::Join" : ["", [
              "#set($allParams = $input.params())\r\n",
              "{",
              "\"body-json\" : $input.json('$'),\r\n\"params\":{\r\n#foreach($type in $allParams.keySet())\r\n    #set($params = $allParams.get($type))\r\n\"$type\" : {\r\n    #foreach($paramName in $params.keySet())\r\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\r\n        #if($foreach.hasNext),#end\r\n    #end\r\n}\r\n    #if($foreach.hasNext),#end\r\n#end\r\n},\r\n\"stage-variables\" : {\r\n#foreach($key in $stageVariables.keySet())\r\n\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\r\n    #if($foreach.hasNext),#end\r\n#end\r\n},\r\n\"context\" : {\r\n    \"account-id\" : \"$context.identity.accountId\",\r\n    \"api-id\" : \"$context.apiId\",\r\n    \"api-key\" : \"$context.identity.apiKey\",\r\n    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\r\n    \"caller\" : \"$context.identity.caller\",\r\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\r\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\r\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\r\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\r\n    \"http-method\" : \"$context.httpMethod\",\r\n    \"stage\" : \"$context.stage\",\r\n    \"source-ip\" : \"$context.identity.sourceIp\",\r\n    \"user\" : \"$context.identity.user\",\r\n    \"user-agent\" : \"$context.identity.userAgent\",\r\n    \"user-arn\" : \"$context.identity.userArn\",\r\n    \"request-id\" : \"$context.requestId\",\r\n    \"resource-id\" : \"$context.resourceId\",\r\n    \"resource-path\" : \"$context.resourcePath\"\r\n}",
              "}"
            ]]}
          }
        },
        "MethodResponses": [
          {
            "StatusCode": "200"
          }
        ],
        "RequestParameters": {
          "method.request.querystring.ip": true,
          "method.request.header.SYMC-APIKEY-USERNAME": true,
          "method.request.header.SYMC-APIKEY-PASSWORD": true
        }
      }
    },
    "SearchApiGetSponsorState": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {"Ref": "SearchApiRestApiGateway"},
        "ResourceId": {"Ref": "SearchApiResource"},
        "HttpMethod": "GET",
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": {"Fn::Join": ["", ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["VeloCloudCTCLambda", "Arn"]}, "/invocations"]]},
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": "$input.path('$')"
              },
              "StatusCode": "200"
            }
          ],
          "PassthroughBehavior" : "WHEN_NO_TEMPLATES",
          "RequestTemplates": {
            "application/json": {"Fn::Join" : ["", [
              "#set($allParams = $input.params())\r\n",
              "{",
              "\"body-json\" : $input.json('$'),\r\n\"params\":{\r\n#foreach($type in $allParams.keySet())\r\n    #set($params = $allParams.get($type))\r\n\"$type\" : {\r\n    #foreach($paramName in $params.keySet())\r\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\r\n        #if($foreach.hasNext),#end\r\n    #end\r\n}\r\n    #if($foreach.hasNext),#end\r\n#end\r\n},\r\n\"stage-variables\" : {\r\n#foreach($key in $stageVariables.keySet())\r\n\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\r\n    #if($foreach.hasNext),#end\r\n#end\r\n},\r\n\"context\" : {\r\n    \"account-id\" : \"$context.identity.accountId\",\r\n    \"api-id\" : \"$context.apiId\",\r\n    \"api-key\" : \"$context.identity.apiKey\",\r\n    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\r\n    \"caller\" : \"$context.identity.caller\",\r\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\r\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\r\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\r\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\r\n    \"http-method\" : \"$context.httpMethod\",\r\n    \"stage\" : \"$context.stage\",\r\n    \"source-ip\" : \"$context.identity.sourceIp\",\r\n    \"user\" : \"$context.identity.user\",\r\n    \"user-agent\" : \"$context.identity.userAgent\",\r\n    \"user-arn\" : \"$context.identity.userArn\",\r\n    \"request-id\" : \"$context.requestId\",\r\n    \"resource-id\" : \"$context.resourceId\",\r\n    \"resource-path\" : \"$context.resourcePath\"\r\n}",
              "}"
            ]]}
          }
        },
        "MethodResponses": [
          {
            "StatusCode": "200"
          }
        ],
        "RequestParameters": {
          "method.request.querystring.ip": true,
          "method.request.header.SYMC-APIKEY-USERNAME": true,
          "method.request.header.SYMC-APIKEY-PASSWORD": true
        }
      }
    }

    "ApiDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "SearchApiRestApiGateway"
        },
        "StageDescription": {
          "DataTraceEnabled": true,
          "LoggingLevel": "INFO",
          "MetricsEnabled": true
        },
        "StageName": {
          "Ref": "Label"
        }
      },
      "DependsOn": [
        "SearchApiGetPlanName",
        "SearchApiGetSponsorName",
        "SearchApiGetSponsorState"
      ]
    },
    "ApiGatewayLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Ref": "SearchApiLambda"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "SearchApiRestApiGateway"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "SearchApiLambda": {
      "Type": "AWS::Lambda::Function",
      "DependsOn" : "SearchApiLambdaRole",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "S3Bucket"
          },
          "S3Key": {
            "Ref": "S3KeyName"
          }
        },
        "Timeout": 120,
        "Handler": "com.pc.functions.lp.SearchApiHandler",
        "FunctionName": "SearchApiLambda",
        "Runtime": "java8",
        "MemorySize": 1536,
        "Role": {"Fn::GetAtt": ["SearchApiLambdaRole", "Arn"]},
        "Environment": {
          "Variables": {
            "esURL": {
              "Ref": "ElasticSearchURL"
            },
            "esPort": {
              "Ref": "ElasticSearchPort"
            }
          }
        }
      }
    },

    "SearchApiGatewayCloudWatchRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "VeloApiGatewayCloudWatchRole",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "apigateway.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": ["arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"]
      }
    },
    "SearchApiLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "VeloCloudLambdaRole",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "VeloCloudLambdaPushToCloudWatchRole",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "EnablePushToCloudWatchLogsForVeloCloud",
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents",
                    "logs:GetLogEvents",
                    "logs:FilterLogEvents",
                    "ec2:CreateNetworkInterface",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DeleteNetworkInterface"
                  ],
                  "Resource": ["*"]
                }
              ]
            }
          }
        ]
      }
    },

    "SearchApiUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "UserName": "VeloCloudApiUser",
        "ManagedPolicyArns": [
          {
            "Ref": "VeloAPIAcessPolicy"
          }
        ]
      }
    },
    "SearchAPIAcessPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "Description":"Api Access Policy For Velo Cloud user",
        "Path": "/",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "execute-api:Invoke"
              ],
              "Resource": [
                {"Fn::Join": ["", ["arn:aws:execute-api:", {"Ref": "AWS::Region"},":",{"Ref":"AWS::AccountId"},":",{"Ref": "VeloCloudRestApiGateway"},"/*/*"]]}
              ]
            }
          ]
        },
        "ManagedPolicyName" : "VeloAPIAcessPolicy"
      }
    }
  },
  "Outputs": {
    "ApiHost": {
      "Value": {
        "Ref": "VeloCloudRestApiGateway"
      }
    },
    "SearchPlanNameApiURL": {
      "Description": "Rest API URL for get datacenter",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "VeloCloudRestApiGateway"
            },
            ".execute-api.us-west-2.amazonaws.com/",
            {
              "Ref": "ApiStage"
            },
            "/datacenters"
          ]
        ]
      }
    },
    "SearchSponsorNameApiURL": {
      "Description": "Rest API URL for create locations",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "VeloCloudRestApiGateway"
            },
            ".execute-api.us-west-2.amazonaws.com/",
            {
              "Ref": "ApiStage"
            },
            "/locations"
          ]
        ]
      }
    },
    "SearchSponsorStateApiURL": {
      "Description": "Rest API URL for update locations",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "VeloCloudRestApiGateway"
            },
            ".execute-api.us-west-2.amazonaws.com/",
            {
              "Ref": "ApiStage"
            },
            "/locations/{locationUuid}"
          ]
        ]
      }
    }
  }
}
